
# Global settings
#=====================================================================
global
    log /dev/log    local0
    log /dev/log    local1 notice
    chroot /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    user haproxy
    group haproxy
    daemon

# Defaults settings
#=====================================================================
defaults
    log     global

    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor

    retries 3

    contimeout  5000
    clitimeout  50000
    srvtimeout  50000
    timeout     http-request    10s
    timeout     queue           1m
    timeout     connect         10s
    timeout     client          1m
    timeout     server          1m
    timeout     http-keep-alive 10s
    timeout     check           10s

    stats enable
    stats uri /haproxy?stats
    stats auth admin:admin
    
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Mail Server 25 settings
#=====================================================================
frontend smtp
    bind                0.0.0.0:25
    mode                tcp
    no option           http-server-close
    timeout             client 1m
    option              tcplog
    default_backend     mailserver


# Main 80 settings
#=====================================================================
frontend  main *:80
    redirect scheme https code 301 if { hdr(Host) -i www.myinbox.com } !{ ssl_fc }
    redirect scheme https code 301 if !{ ssl_fc }

    reqadd X-Forwarded-Proto:\ http

    maxconn              200000

    acl url_static       path_beg       -i /static /images /javascript /stylesheets /assets /css /js
    acl url_static       path_end       -i .jpg .gif .png .css .js .html .html
    acl url_media        path_end       -i .pdf .xml .txt .psd

    use_backend          nginx_static   if url_static
    use_backend          nginx_media    if url_media


# Main 443 settings
#=====================================================================
frontend https
    # Assign PFS
    bind                 *:443 ssl crt /etc/ssl/myinbox.com.pem npn spdy/2 no-tls-tickets ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-RC4-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES128-SHA:AES256-SHA256:AES256-SHA:RC4-SHA

    # Distinguish between secure and insecure requests
    acl                  secure          dst_port eq 443

    # Mark all cookies as secure if sent over SSL
    rsprep               ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure

    # Add the HSTS header with a 1 year max-age
    rspadd               Strict-Transport-Security:\ max-age=31536000 if secure

    rsprep               ^Set-Cookie:\ (.*) Set-Cookie:\ \1;\ Secure if secure

    reqadd               X-Forwarded-Proto:\ https

    maxconn              200000

    contimeout           5000
    clitimeout           50000
    srvtimeout           50000

    acl url_static       path_beg       -i /static /images /javascript /stylesheets /assets /css /js
    acl url_static       path_end       -i .jpg .gif .png .css .js .html .html
    acl url_media        path_end       -i .pdf .xml .txt .psd

    acl url_api           path_beg       -i /api/

    acl is_websocket     hdr(Upgrade)   -i WebSocket
    acl is_websocket     hdr_beg(Host)  -i ws

    acl is_app           hdr_dom(host)  -i app.myinbox.com

    acl is_www           hdr_dom(host)  -i www.myinbox.com
    acl is_static        hdr_dom(host)  -i static.myinbox.com
    acl is_media         hdr_dom(host)  -i media.myinbox.com
    acl is_notif         hdr_dom(host)  -i notifications.myinbox.com
    acl is_api           hdr_dom(host)  -i api.myinbox.com

    use_backend          nginx_static   if url_static is_static
    use_backend          nginx_media    if url_media is_images
    use_backend          api            if url_api is_api
    use_backend          notifications  if is_websocket is_notif
    use_backend          socket_app_tcp if is_app

    default_backend      web


# MailServer settings
#=====================================================================
backend mailserver
    mode                 tcp
    no option            http-server-close
    option               tcplog
    timeout              server 1m
    timeout              connect 5s
    balance              leastconn

    server smtp1 127.0.0.1:2525 check send-proxy


# Web settings -- Handles all the dummy root requests
#=====================================================================
backend web
    mode http

    option httpclose
    option httplog
    option forwardfor
    option http-server-close
    option forceclose
    option redispatch
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    balance leastconn
    # balance roundrobin

    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000

    server web1 localhost:8180 weight 1 maxconn 1024 check

# Static Server settings -- Handles all the static files urls -- CDN behind
#=====================================================================
backend nginx_static
    mode http

    option httpclose
    option httplog
    option forwardfor
    option http-server-close
    option forceclose
    option redispatch
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    balance leastconn
    # balance roundrobin

    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000

    server web1 localhost:8080 weight 1 maxconn 1024 check

# Static non hight traffuc Server settings -- Handles all the media files urls -- S3 behind
#=====================================================================
backend nginx_media
    mode http

    option httpclose
    option httplog
    option forwardfor
    option http-server-close
    option forceclose
    option redispatch
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    balance leastconn
    # balance roundrobin

    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000

    server web1 localhost:8080 weight 1 maxconn 1024 check

# Static non hight traffuc Server settings -- Handles all the media files urls -- S3 behind
#=====================================================================
backend notifications
    mode http

    option httpclose
    option httplog
    option forwardfor
    option http-server-close
    option forceclose
    option redispatch
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    balance leastconn
    # balance roundrobin

    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000

    server web1 localhost:8080 weight 1 maxconn 1024 check

# Static non hight traffuc Server settings -- Handles all the media files urls -- S3 behind
#=====================================================================
backend api
    mode http

    option httpclose
    option httplog
    option forwardfor
    option http-server-close
    option forceclose
    option redispatch
    option httpchk HEAD / HTTP/1.1\r\nHost:localhost

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    balance leastconn
    # balance roundrobin

    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000

    server web1 localhost:8080 weight 1 maxconn 1024 check

backend socket_app_tcp
    mode tcp
    tcp-request content accept
    timeout check 1s
    timeout queue 5000
    timeout server 86400000
    timeout connect 86400000
    server app_node2 localhost:8280 weight 1 maxconn 2000 check
